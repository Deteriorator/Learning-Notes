##############################################################################
C 语言从头写一个 SQLite 程序
##############################################################################

源项目来自于 : https://cstack.github.io/db_tutorial/ ， 被 `cstack`_ 维护 。 本\
仓库仅作为本人学习时文档 ， 全部以中文书写 ， 相当于翻译 。 

.. _`cstack`: https://github.com/cstack

- Part 01 REPL 的介绍和设置
- Part 02 世界上最简单的 SQL 编译器和虚拟机 
- Part 03 一个内存中的只加单表的数据库
- Part 04 第一个测试 (和 BUG)
- Part 05 持久性到磁盘
- Part 06 游标抽象
- Part 07 B 型树简介
- Part 08 B 型树叶子节点格式
- Part 09 二进制搜索和重复 Key
- Part 10 分割一个叶子节点
- Part 11 递归搜索 B 型树
- Part 12 扫描多层次的 B 型树
- Part 13 分割后更新父节点


.. contents::

******************************************************************************
第 00 部分  数据库是怎么工作的
******************************************************************************

- 数据是以什么格式存储的 ? (在内存中和硬盘中)
- 它什么时候从内存中移动到磁盘 ?
- 为什么一个数据表只能有一个主键 (primary key) ?
- 回滚是如何进行的 ?
- 索引的格式是怎样的 ?
- 全表扫描是何时以及如何进行的 ?
- 准备好的报表是以什么格式保存的 ?

总而言之 ， 一个数据库是怎么工作的 ?

为了理解数据库工作原理 ， 我正在用 C 语言从头开始建立一个克隆的 SQLite ， 我将在\
文档中记录我的过程 。 

..
    
    "What I cannot create, I do not understand." – Richard Feynman

.. image:: img/arch.svg

sqlite architecture (https://www.sqlite.org/arch.html)

******************************************************************************
第 01 部分  REPL 的介绍和设置
******************************************************************************

作为一个 Web 开发者 ， 在工作中我每天使用关系型数据库 ， 但是它们对于我来说是一个\
黑盒 。 我有一些问题 ： 

- 数据是以什么格式存储的 ? (在内存中和硬盘中)
- 它什么时候从内存中移动到磁盘 ?
- 为什么一个数据表只能有一个主键 (primary key) ?
- 回滚是如何进行的 ?
- 索引的格式是怎样的 ?
- 全表扫描是何时以及如何进行的 ?
- 准备好的报表是以什么格式保存的 ?

总而言之 ， 一个数据库是怎么工作的 ?

为了弄清这些问题 ， 我正在从头开始写一个数据库 。 它以 SQLite 为模型 ， 因为它被\
设计成比 MySQL 或 PostgreSQL 更小的功能 ， 所以我有更好的希望了解它 。 整个数据库\
被存储在一个文件中 。

SQLite
==============================================================================

SQLite 官方网站上有很多关于 SQLite 的 `内部文档`_ ， 另外我还有一本 \
`《 SQLite 数据库系统 ： 设计与实现 》`_ 。

.. _`内部文档`: https://www.sqlite.org/arch.html
.. _`《 SQLite 数据库系统 ： 设计与实现 》`: https://play.google.com/store/books/details?id=9Z6IQQnX1JEC

.. image:: img/arch1.gif

sqlite architecture (https://www.sqlite.org/zipvfs/doc/trunk/www/howitworks.wiki)

一个查询要经过一连串的组件 ， 以检索或修改数据 。 前端由以下部分组成 : 

- tokenizer
- parser
- code generator

前端的输入是一个 SQL 查询 。 输出是 sqlite 虚拟机字节码 ( 基本上是一个可以在数据\
库上操作的编译程序 ) 。 

后端由以下部分组成 : 

- virtual machine
- B-tree
- pager
- os interface

虚拟机把由前端生成的字节码作为指令 。 然后它可以对一个或多个表或索引进行操作 ， 每\
个表或索引都存储在一个叫做 B 树的数据结构中 。 虚拟机本质上是一个关于字节码指令类\
型的大开关语句 。 

每个 B 型树由许多节点组成 。 每个节点都是一个页面的长度 。 B 树可以通过向 pager \
发出命令从磁盘上检索一个页面或将其保存回磁盘 。 

pager 接收读取或写入数据页的命令 。 它负责在数据库文件的适当偏移处进行读 / 写 。 \
它还在内存中保存最近访问的页面的缓存 ， 并决定这些页面何时需要写回磁盘 。 


