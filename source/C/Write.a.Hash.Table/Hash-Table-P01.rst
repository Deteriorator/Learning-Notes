*******************************************************************************
Part 01 - 简介
*******************************************************************************

.. contents:: 目录

哈希表是一种数据结构， 它提供了 `关联数组 API`_ 的快速实现。 由于有关哈希表的术语可\
能令人困惑， 因此我在下面添加了一个 `摘要`_。

.. _`关联数组 API`: #id16
.. _摘要: #id19

哈希表由一组 "桶" 组成， 每个桶存储一个键值对。 为了定位应该存储键值对的桶， 键被传递\
给一个散列函数。 此函数返回一个整数， 用作存储桶数组中该对的索引。 当我们想要检索一个\
键值对时， 我们将键提供给同一个散列函数， 接收它的索引， 并使用索引在数组中找到它。 

数组索引的算法复杂度为 O(1)， 这使得哈希表在存储和检索数据时速度很快。

我们的哈希表将字符串键映射到字符串值， 但这里给出的原则适用于将任意键类型映射到任意值\
类型的哈希表。 仅支持 ASCII 字符串， 因为支持 unicode 非常重要并且超出了本教程的范围。 

1.1 - API
===============================================================================

关联数组是无序键值对的集合。 不允许使用重复的 Key。 支持以下操作： 

- ``search(a, k)``: 从关联数组 ``a`` 中返回与键 ``k`` 关联的值 ``v``， 如果键不存\
  在， 则返回 ``NULL``。
- ``insert(a, k, v)``: 将 ``k:v`` 对存储在关联数组 ``a`` 中。 
- ``delete(a, k)``: 删除与 ``k`` 关联的 ``k:v`` 对， 如果 ``k`` 不存在， 则不执行\
  任何操作。 

1.2 - Setup
===============================================================================

要在您的计算机上设置 C， 请参阅 `《Build Your Own Lisp》`_ 一书中 Daniel Holden \
的 `指南`_。 Build Your Own Lisp 是一本好书， 我建议你通读它。 

.. _`《Build Your Own Lisp》`: http://www.buildyourownlisp.com/chapter2_installation
.. _`指南`: https://github.com/jamesroutley/write-a-hash-table/blob/master/orangeduck

1.3 - Code structure
===============================================================================

代码应放在以下目录结构中: 

.. code-block:: bash 

    .
    ├── build
    └── src
        ├── hash_table.c
        ├── hash_table.h
        ├── prime.c
        └── prime.h

``src`` 将包含我们的代码， ``build`` 将包含我们编译的二进制文件。 

1.4 - 术语
===============================================================================

有很多名称可以互换使用。 在本文中， 我们将使用以下内容： 

- 关联数组： 实现上述 API_ 的抽象数据结构。 也称为地图、 符号表或字典。 
- 哈希表： 使用哈希函数的关联数组 API 的快速实现。 也称为哈希映射、 映射、 哈希或字典。 

关联数组可以用许多不同的底层数据结构来实现。 可以通过简单地将项目存储在数组中并在搜索\
时遍历数组来实现 (不考虑性能)。 关联数组和哈希表经常被混淆， 因为关联数组经常被实现为\
哈希表。 

.. _API: #id16

下一节： 哈希表结构
